name: Merge

on:
  workflow_dispatch:
  push:
    branches:
      - master


jobs:
  merge-remotes:
    name: Merge latest changes
    runs-on: ubuntu-latest
    env:
      # Git configuration needed for git commits
      GIT_USER_NAME: github-actions
      GIT_USER_EMAIL: github-actions@sap.com

      # Environment variables for the source repository
      # These can be set using the workflow context since the source repo will be the same as
      # where the workflow is run from.
      SOURCE_OWNER_REPO: ${{ github.repository }}
      SOURCE_REPO_NAME: ${{ github.event.repository.name }}
      SOURCE_REPO_BRANCH: master
      SOURCE_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SOURCE_REPO_HOST: github.com

      # Environment variables for the target repo where the changes should be pushed to
      TARGET_OWNER_REPO: coDoc/test
      TARGET_REPO_NAME: test
      TARGET_REPO_BRANCH: master
      TARGET_REPO_TOKEN: ${{ secrets.INT_PAT }}
      TARGET_REPO_HOST: github.tools.sap

    steps:
      - name: Clone target repository
        id: clone_target
        run: |
          git clone https://x-access-token:${{ env.TARGET_REPO_TOKEN }}@${{ env.TARGET_REPO_HOST }}/${{ env.TARGET_OWNER_REPO }}.git

      - name: Add git configuration
        if: ${{ success() }}
        id: config_git
        # Set git config to local to avoid polluting the git config of self-hosted runner
        run: |
          git config --local user.name ${{ env.GIT_USER_NAME }}
          git config --local user.email ${{ env.GIT_USER_EMAIL }}
        working-directory: ./${{ env.TARGET_REPO_NAME }}

      - name: Add source repo as remote and fetch
        if: ${{ success() }}
        id: add_remote
        run: |
          git remote add \
            source https://x-access-token:${{ env.SOURCE_REPO_TOKEN }}@${{ env.SOURCE_REPO_HOST }}/${{ env.SOURCE_OWNER_REPO }}.git
          git fetch --all
        working-directory: ./${{ env.TARGET_REPO_NAME }}

      - name: Merge source repo/branch onto target
        if: ${{ success() }}
        id: merge_source_target
        run: |
          git merge \
            source/${{ env.SOURCE_REPO_BRANCH }} \
            --allow-unrelated-histories \
            -X theirs \
            -m "Merge ..."
        working-directory: ./${{ env.TARGET_REPO_NAME }}

      - name: Push to origin
        if: ${{ success() }}
        id: push_origin
        run: |
          git push origin ${{ env.TARGET_REPO_BRANCH }}
        working-directory: ./${{ env.TARGET_REPO_NAME }}

      - name: Clean up
        if: ${{ always() }}
        id: cleanup
        run: |
          rm -rf ${{ env.TARGET_REPO_NAME }}
